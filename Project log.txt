Github / User manager
Use MongoDB / Node.js / React

---
create repo
create vs code workspace

backend: Node.js
	setup backend
		create package.json
		create folder structure
		create index.js
		install express (web framework for Node.js)
		install nodemon for development (restarts backend if the files in the directory change)
		install cors (to allow same origin requests)
		install morgan (http request logger)
		install mongoose (makes it easier to use MongoDB)
		install dotenv (so we can use env variables for MongoDB password and port)
		install eslint for development (to help maintain clean readable code)
	commit
	
	add project log
	create utils
		config.js (handles dotenv / environment variables)
		logger.js (logging)
		middleware.js (error handling for express & mongoose requests)
	update index.js (start the app using parameters from config and log the port using logger)
	create app.js (express app)
	create users.js (express endpoint router)
		implement get all users endpoint
	create user.js (mongoose schema / model)
	setup database in MongoDB Atlas
	Test get all users functionality locally using browser (http://localhost:3001/api/users) (requires password to the database)
		-> OK
	commit
	
	add readme
	update project log 
	commit
	
	add REST Client requests
	modify users.js
		add support for POST / add user end point, test locally using REST client
			-> OK
		add support to GET single user with id, test locally using browser
			-> OK		
		add support for DELETE / remove user end point, test locally using REST client
			-> OK
		add support for PUT / modify user, test locally using REST client
			-> OK
	modify user.js
		add required fields (name, username, email) and validation (email must have @)
	commit
		
frontend: react
	setup frontend
		create react app using Vite (has HMR which makes testing easier)
		install axios (makes communication with backend easier)
	implement basic user list
		create service/users.js, (handles communication with backend using axios)
		create components/StatusMessage.jsx (shows message if user is added etc or if there is an error)
		create components/UserList.jsx (shows a list of users (username: name) with modify & delete buttons)
		

todo:	
implement user delete
implement user modify
implement single user details
implement add new user
implement filter user	
improve ui